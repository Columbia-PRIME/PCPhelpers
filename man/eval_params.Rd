% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_params.R
\name{eval_params}
\alias{eval_params}
\title{Evaluates a given setting of lambda and mu on a given matrix with a given PCP function.}
\usage{
eval_params(seed, mat, pcp_func, perc_b, eval_params, ...)
}
\arguments{
\item{seed}{The seed to use for the random corruption of the given matrix, \code{mat}.}

\item{mat}{The data matrix to run PCP on.}

\item{pcp_func}{The PCP function to use. \emph{Note: the PCP function passed must be able to handle missing \code{NA} values.} For example: \code{root_pcp_na}.}

\item{perc_b}{The percentage of \code{mat} to randomly corrupt as missing.}

\item{eval_params}{A character vector containing the names of the parameters under evaluation.}

\item{...}{The parameters to pass on to \code{pcp_func}.}

\item{lambda}{The value of lambda to be passed to \code{pcp_func}.}

\item{mu}{The value of mu to be passed to \code{pcp_func}.}
}
\value{
A vector of length containing the values of the parameters used, along with evaluation metrics.
}
\description{
\code{eval_params} evaluates a given setting of lambda and mu on a given matrix with a given PCP function. 
The given matrix has a given percentage of its entries randomly corrupted as missing \code{NA} values before evaluation.
The parameter setting is scored by how well the given PCP function recovers those randomly corrupted values.
}
\examples{

library(pcpr) # since we will be passing grid_search_cv a PCP function 

# simulate a data matrix:

n <- 50
p <- 10
data <- sim_data(sim_seed = 1, nrow = n, ncol = p, rank = 3, sigma=0, add_sparse = FALSE)
mat <- data$M

# pick a parameter setting of lambda and mu to try:

lambda <- 1/sqrt(n)
mu <- sqrt(p/2)

# evaluate that setting:

score <- eval_params(lambda, mu, 1, mat, root_pcp_na, .2)
}
\seealso{
\code{\link{corrupt_mat_randomly}}, \code{\link{grid_search_cv}}, \code{\link{random_search_cv}}, \code{\link{bayes_search_cv}}
}
\keyword{internal}
